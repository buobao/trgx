<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/task
    	http://www.springframework.org/schema/task/spring-task-3.1.xsd
    	http://www.springframework.org/schema/util
		http://www.springframework.org/schema/util/spring-util-3.0.xsd"
       default-lazy-init="true"
       default-autowire="byName">
       <description>Spring公共配置</description>

    <!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->
    <context:component-scan base-package="com.joint.****,com.fz.us.****">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
    </context:component-scan>


    <!-- 引入属性文件
    <context:property-placeholder location="classpath:application.properties" />-->

    <bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <property name="driverClassName" value="${jdbc.driver}" />

        <!-- 初始化连接大小 -->
        <property name="initialSize" value="0" />
        <!-- 连接池最大使用连接数量 -->
        <property name="maxActive" value="20" />
        <!-- 连接池最大空闲 -->
        <property name="maxIdle" value="20" />
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="0" />
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="60000" />
        <!--
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="33" />
         -->
        <property name="validationQuery" value="${validationQuery}" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />
        <property name="testWhileIdle" value="true" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="25200000" />

        <!-- 打开removeAbandoned功能 -->
        <property name="removeAbandoned" value="true" />
        <!-- 1800秒，也就是30分钟 -->
        <property name="removeAbandonedTimeout" value="1800" />
        <!-- 关闭abanded连接时输出错误日志 -->
        <property name="logAbandoned" value="true" />

        <!-- 监控数据库 -->
        <!--
        <property name="filters" value="stat" />
         -->
        <property name="filters" value="mergeStat" />
    </bean>

    <!-- sessionFactory 配置 -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <!-- 配置Hibernate拦截器,自动填充数据的插入、更新时间 -->
        <property name="entityInterceptor" ref="entityInterceptor" />
        <property name="dataSource" ref="dataSource"></property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
                <!--<prop key="javax.persistence.validation.mode">none</prop>
                -->
                <prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext</prop>
            </props>
        </property>
        <!-- 扫描entity -->
        <property name="packagesToScan">
            <list>
                <value>com.joint.base.entity</value>
                <value>com.joint.core.entity</value>
                <value>com.fz.us.base.entity</value>
                <value>com.fz.us.dict.entity</value>
            </list>
        </property>
    </bean>

    <bean id="transactionManager"
          class="org.springframework.orm.hibernate4.HibernateTransactionManager"
          abstract="false" lazy-init="default" autowire="default">
        <property name="sessionFactory">
            <ref bean="sessionFactory" />
        </property>
    </bean>
    <!-- 事务管理配置 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="*" read-only="false" />
            <tx:method name="insert*" read-only="false"
                       rollback-for="Exception" />
            <tx:method name="get*" read-only="false"
                       rollback-for="Exception" />
            <tx:method name="add*" read-only="false"
                       rollback-for="Exception" />
            <tx:method name="update*" read-only="false"
                       rollback-for="Exception" />
            <tx:method name="delete*" read-only="false"
                       rollback-for="Exception" />
            <tx:method name="find*" read-only="true" />
            <tx:method name="query*" read-only="true" />
            <tx:method name="count*" read-only="true" />
        </tx:attributes>
    </tx:advice>
    <!-- 监控Dao、Service中的方法，会监控到Catch的定义-->
    <aop:config proxy-target-class="true">
        <aop:advisor pointcut="execution(* com.fz.us.*.dao.impl.*DaoImpl.*(..))"
                     advice-ref="txAdvice"/>
        <aop:advisor pointcut="execution(* com.fz.us.*.service.impl.*ServiceImpl.*(..))"
                     advice-ref="txAdvice"/>
        <aop:advisor pointcut="execution(* com.joint.*.dao.impl.*DaoImpl.*(..))"
                     advice-ref="txAdvice"/>
        <aop:advisor pointcut="execution(* com.joint.*.service.impl.*ServiceImpl.*(..))"
                     advice-ref="txAdvice"/>
        <aop:advisor pointcut="execution(* com.joint.*.service.activiti.*Service.*(..))"
                     advice-ref="txAdvice"/>
    </aop:config>

    <!-- JDBC配置 -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource">
            <ref bean="dataSource"/>
        </property>
    </bean>
    <!-- 配置druid监控spring jdbc -->
    <bean id="druid-stat-interceptor"
          class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">
    </bean>
    <bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut"
          scope="prototype">
        <property name="patterns">
            <list>
                <value>com.fz.us.*.service.*</value>
            </list>
        </property>
    </bean>
    <aop:config>
        <aop:advisor advice-ref="druid-stat-interceptor"
                     pointcut-ref="druid-stat-pointcut" />
    </aop:config>

    <aop:aspectj-autoproxy proxy-target-class="true" />

    <bean id="systemConfig" class="com.joint.base.bean.SystemConfig">
        <property name="name" value="${system.cfg.name}"></property>
        <property name="webroot" value="${system.cfg.webroot}"></property>
        <property name="smsname" value="${system.cfg.smsname}"></property>
        <property name="audioPath" value="${audio.path}"></property>
        <property name="officeId" value="${system.cfg.officeId}"></property>
    </bean>
    <!--获取spring上下文环境-->
    <bean id="springUtil" class="com.joint.base.util.SpringUtils"></bean>

    <import resource="classpath:email/applicationContext-email.xml"/>
    <import resource="classpath:cache/applicationContext-memcached.xml"/>
    <import resource="classpath:mongodb/applicationContext-mongodb.xml"/>
    <import resource="classpath:shiro/applicationContext-shiro.xml"/>
    <import resource="classpath:redis/applicationContext-redis.xml"/>

    <import resource="classpath:activiti/applicationContext-activiti.xml"/>
    <import resource="classpath:mp/applicationContext-mp.xml"/>
    <import resource="classpath:jms/applicationContext-jms-advanced.xml"/>
    <import resource="classpath:jms/applicationContext-jms-advanced-listener.xml"/>

    <!-- production环境 -->
    <beans profile="production">
        <context:property-placeholder ignore-unresolvable="true"
                                      location="classpath*:/application.product.properties" />
        <import resource="classpath:jms/applicationContext-jms-advanced-listener.xml"/>
    </beans>


    <!-- production环境 -->
    <beans profile="production,job">
        <context:property-placeholder ignore-unresolvable="true"
                                      location="classpath*:/application.product.properties" />

        <import resource="classpath:quartz/applicationContext-quartz.xml"/>
    </beans>

    <!-- local development环境-->
    <beans profile="development">
        <context:property-placeholder ignore-resource-not-found="true"
                                      location="classpath*:/application.development.properties" />
        <import resource="classpath:quartz/applicationContext-quartz.xml"/>
    </beans>

    <!-- unit test环境 -->
    <beans profile="test">
        <context:property-placeholder ignore-resource-not-found="true"
                                      location="classpath*:/application.test.properties" />
        <import resource="classpath:quartz/applicationContext-quartz.xml"/>

    </beans>
</beans>